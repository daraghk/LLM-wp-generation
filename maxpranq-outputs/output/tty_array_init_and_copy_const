


===============
inferInvNondet for chc:  inv2 -> fail


 hr.body (exists (INT) [&&    0<i1    select(_FH_5, i1)<1    i1<_FH_7    _FH_6>=_FH_7])

cands [src]:  
cands [dst]:  
 check chc: inv2  -> false
Model: [&&    _FH_5=const-array(INT, 0)    _FH_6=2    _FH_7=2]

 src->  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]

 dst->


===============
inferInvNondet for chc:  inv2 -> inv2


 hr.body [&&    _FH_7=_FH_7'    _FH_4=_FH_4'    _FH_6<_FH_7    _FH_6'=(_FH_6+1)    store(_FH_5, _FH_6, select(_FH_4, _FH_6))=_FH_5']

cands [src]:  
  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]
 check chc: inv2  -> inv2
Model: [&&    _FH_4=const-array(INT, 0)    _FH_5=const-array(INT, 4)    _FH_6=1    _FH_7=2    _FH_4'=const-array(INT, 0)    _FH_5'=store(const-array(INT, 4), 1, 0)    _FH_6'=2    _FH_7'=2]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    select(_FH_5, i1)>=1    i1>=_FH_7    i1>=_FH_6])
retres: [||    0>=i1    i1>=_FH_7    i1>=_FH_6]
dcda: (select(_FH_5, i1)>=1)
dcdr: ((0>=i1)||(i1>=_FH_7))
dc: (select(_FH_5', i1)<1)
    >>> nbt (_FH_7=_FH_7')
      ----> (_FH_7=_FH_7')
    >>> nbt (_FH_4=_FH_4')
      ----> (_FH_4=_FH_4')
    >>> nbt (_FH_6<_FH_7)
      ----> (_FH_4=_FH_4')
    >>> nbt (_FH_6'=(_FH_6+1))
      ----> (_FH_4=_FH_4')
    >>> nbt (store(_FH_5, _FH_6, select(_FH_4, _FH_6))=_FH_5')
      ----> (select(_FH_4, i1)=select(_FH_5', i1))
eTmp: [&&
  (_FH_7=_FH_7')
  (_FH_4=_FH_4')
  (__repl_0<1)
  (__repl_1=__repl_0)
]

to elim: _FH_4', _FH_5', _FH_7', __repl_0
res = (__repl_1<1)
newcnd: (select(_FH_4, i1)<1)
abdtype: 0
nonvac: (select(_FH_4, i1)>=1)
RF: (i1>=_FH_6)
AF0: (((0>=i1)||(i1>=_FH_7))||(select(_FH_4, i1)>=1))

 src->  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      (select(_FH_4, i1)>=1)
      [!
        (i1>=_FH_6)
      ]
    ]]

 dst->  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      (select(_FH_4, i1)>=1)
      [!
        (i1>=_FH_6)
      ]
    ]]



===============
inferInvNondet for chc:  inv2 -> inv2


 hr.body [&&    _FH_7=_FH_7'    _FH_4=_FH_4'    _FH_6<_FH_7    _FH_6'=(_FH_6+1)    store(_FH_5, _FH_6, select(_FH_4, _FH_6)+-1)=_FH_5']

cands [src]:  
  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      (select(_FH_4, i1)>=1)
      [!
        (i1>=_FH_6)
      ]
    ]]
 check chc: inv2  -> inv2
Model: [&&    _FH_4=store(store(store(const-array(INT, 7), 2, 1), -1235, 8855), 1, 0)    _FH_5=store(const-array(INT, 8), -1235, 8856)    _FH_6=2    _FH_7=3    _FH_4'=store(store(store(const-array(INT, 7), 2, 1), -1235, 8855), 1, 0)    _FH_5'=store(store(const-array(INT, 8), -1235, 8856), 2, 0)    _FH_6'=3    _FH_7'=3]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    select(_FH_5, i1)>=1    i1>=_FH_7    i1>=_FH_6])
retres: [||    0>=i1    i1>=_FH_7    i1>=_FH_6]
dcda: (select(_FH_5, i1)>=1)
dcdr: ((0>=i1)||(i1>=_FH_7))
dc: (select(_FH_5', i1)<1)
    >>> nbt (_FH_7=_FH_7')
      ----> (_FH_7=_FH_7')
    >>> nbt (_FH_4=_FH_4')
      ----> (_FH_4=_FH_4')
    >>> nbt (_FH_6<_FH_7)
      ----> (_FH_4=_FH_4')
    >>> nbt (_FH_6'=(_FH_6+1))
      ----> (_FH_4=_FH_4')
    >>> nbt (store(_FH_5, _FH_6, select(_FH_4, _FH_6)+-1)=_FH_5')
      ----> ((select(_FH_4, i1)+-1)=select(_FH_5', i1))
eTmp: [&&
  (_FH_7=_FH_7')
  (_FH_4=_FH_4')
  (__repl_0<1)
  ((__repl_1+-1)=__repl_0)
]

to elim: _FH_4', _FH_5', _FH_7', __repl_0
res = ((__repl_1+-1)<1)
newcnd: (select(_FH_4, i1)<2)
abdtype: 0
nonvac: (select(_FH_4, i1)>=2)
RF: (i1>=_FH_6)
AF0: (((0>=i1)||(i1>=_FH_7))||(select(_FH_4, i1)>=2))
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_7    select(_FH_4, i1)>=1    i1<_FH_6])
retres: [||    0>=i1    i1>=_FH_7    i1<_FH_6]

 src->  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      (select(_FH_4, i1)>=1)
      [!
        (i1>=_FH_6)
      ]
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      [!
        (i1>=_FH_6)
      ]
      (select(_FH_4, i1)>=2)
    ]]

 dst->  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      (select(_FH_4, i1)>=1)
      [!
        (i1>=_FH_6)
      ]
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      [!
        (i1>=_FH_6)
      ]
      (select(_FH_4, i1)>=2)
    ]]



===============
inferInvNondet for chc:  inv1 -> inv2


 hr.body [&&    0=_FH_6'    _FH_0=_FH_4'    _FH_3=_FH_7'    _FH_3>0    _FH_1=_FH_5']

cands [src]:  
cands [dst]:  
  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      (select(_FH_4, i1)>=1)
      [!
        (i1>=_FH_6)
      ]
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      [!
        (i1>=_FH_6)
      ]
      (select(_FH_4, i1)>=2)
    ]]
 check chc: inv1  -> inv2
Model: [&&    _FH_0=const-array(INT, 0)    _FH_1=const-array(INT, 0)    _FH_3=2    _FH_4'=const-array(INT, 0)    _FH_5'=const-array(INT, 0)    _FH_6'=0    _FH_7'=2]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    select(_FH_5, i1)>=1    i1>=_FH_7    i1>=_FH_6])
retres: [||    0>=i1    i1>=_FH_7    i1>=_FH_6]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_7    select(_FH_4, i1)>=1    i1<_FH_6])
retres: [||    0>=i1    i1>=_FH_7    i1<_FH_6]
dcda: (select(_FH_4, i1)>=1)
dcdr: [||    0>=i1    i1>=_FH_7    i1<_FH_6]
dc: [&&    0<i1    i1<_FH_7'    i1>=_FH_6'    select(_FH_4', i1)<1]
    >>> nbt (0=_FH_6')
      ----> (0=_FH_6')
    >>> nbt (_FH_0=_FH_4')
      ----> (_FH_0=_FH_4')
    >>> nbt (_FH_3=_FH_7')
      ----> (_FH_3=_FH_7')
    >>> nbt (_FH_3>0)
      ----> (_FH_3>0)
    >>> nbt (_FH_1=_FH_5')
      ----> (_FH_1=_FH_5')
eTmp: [&&
  (0=_FH_6')
  (_FH_0=_FH_4')
  (_FH_3=_FH_7')
  (_FH_3>0)
  (_FH_1=_FH_5')
  (0<i1)
  (i1<_FH_7')
  (i1>=_FH_6')
  (__repl_0<1)
]

to elim: _FH_4', _FH_5', _FH_6', _FH_7', __repl_0
res = [&&    _FH_3>0    i1>=0    i1>0    _FH_3>i1]
newcnd: [&&    _FH_3>0    i1>=0    i1>0    _FH_3>i1]
abdtype: 0
nonvac: [||    i1<0    i1<=0    _FH_3<=i1]
dc: [&&    0<i1    i1<_FH_7'    i1>=_FH_6'    select(_FH_4', i1)<1]
    >>> nbt (0=_FH_6')
      ----> (0=_FH_6')
    >>> nbt (_FH_0=_FH_4')
      ----> (select(_FH_0, i1)=select(_FH_4', i1))
    >>> nbt (_FH_3=_FH_7')
      ----> (_FH_3=_FH_7')
    >>> nbt (_FH_3>0)
      ----> (_FH_3>0)
    >>> nbt (_FH_1=_FH_5')
      ----> (select(_FH_1, i1)=select(_FH_5', i1))
eTmp: [&&
  (0=_FH_6')
  (_FH_3=_FH_7')
  (_FH_3>0)
  (0<i1)
  (i1<_FH_7')
  (i1>=_FH_6')
  (__repl_1<1)
  (__repl_2=__repl_1)
  (__repl_3=__repl_0)
]

to elim: _FH_4', _FH_5', _FH_6', _FH_7', __repl_0, __repl_1
res = [&&    _FH_3>0    0<i1    i1>=0    __repl_2<1    i1<_FH_3]
newcnd: [&&    _FH_3>0    0<i1    i1>=0    i1<_FH_3    select(_FH_0, i1)<1]
abdtype: 1
nonvac: [||    0>=i1    i1<0    i1>=_FH_3    select(_FH_0, i1)>=1]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_7    i1<_FH_6    select(_FH_4, i1)>=2])
retres: [||    0>=i1    i1>=_FH_7    i1<_FH_6]
dcda: (select(_FH_4, i1)>=2)
dcdr: [||    0>=i1    i1>=_FH_7    i1<_FH_6]
dc: [&&    0<i1    i1<_FH_7'    i1>=_FH_6'    select(_FH_4', i1)<2]
    >>> nbt (0=_FH_6')
      ----> (0=_FH_6')
    >>> nbt (_FH_0=_FH_4')
      ----> (_FH_0=_FH_4')
    >>> nbt (_FH_3=_FH_7')
      ----> (_FH_3=_FH_7')
    >>> nbt (_FH_3>0)
      ----> (_FH_3>0)
    >>> nbt (_FH_1=_FH_5')
      ----> (_FH_1=_FH_5')
eTmp: [&&
  (0=_FH_6')
  (_FH_0=_FH_4')
  (_FH_3=_FH_7')
  (_FH_3>0)
  (_FH_1=_FH_5')
  (0<i1)
  (i1<_FH_7')
  (i1>=_FH_6')
  (__repl_0<2)
]

to elim: _FH_4', _FH_5', _FH_6', _FH_7', __repl_0
res = [&&    _FH_3>0    i1>=0    i1>0    _FH_3>i1]
newcnd: [&&    _FH_3>0    i1>=0    i1>0    _FH_3>i1]
abdtype: 0
nonvac: [||    i1<0    i1<=0    _FH_3<=i1]
dc: [&&    0<i1    i1<_FH_7'    i1>=_FH_6'    select(_FH_4', i1)<2]
    >>> nbt (0=_FH_6')
      ----> (0=_FH_6')
    >>> nbt (_FH_0=_FH_4')
      ----> (select(_FH_0, i1)=select(_FH_4', i1))
    >>> nbt (_FH_3=_FH_7')
      ----> (_FH_3=_FH_7')
    >>> nbt (_FH_3>0)
      ----> (_FH_3>0)
    >>> nbt (_FH_1=_FH_5')
      ----> (select(_FH_1, i1)=select(_FH_5', i1))
eTmp: [&&
  (0=_FH_6')
  (_FH_3=_FH_7')
  (_FH_3>0)
  (0<i1)
  (i1<_FH_7')
  (i1>=_FH_6')
  (__repl_1<2)
  (__repl_2=__repl_1)
  (__repl_3=__repl_0)
]

to elim: _FH_4', _FH_5', _FH_6', _FH_7', __repl_0, __repl_1
res = [&&    _FH_3>0    0<i1    i1>=0    i1<_FH_3    __repl_2<2]
newcnd: [&&    _FH_3>0    0<i1    i1>=0    i1<_FH_3    select(_FH_0, i1)<2]
abdtype: 1
nonvac: [||    0>=i1    i1<0    i1>=_FH_3    select(_FH_0, i1)>=2]

 src->  [forall (i1)
    [||
      (0>=i1)
      (i1<0)
      (i1>=_FH_3)
      (select(_FH_0, i1)>=1)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1<0)
      (i1>=_FH_3)
      (select(_FH_0, i1)>=2)
    ]]

 dst->  [forall (i1)
    [||
      (0>=i1)
      (select(_FH_5, i1)>=1)
      (i1>=_FH_7)
      (i1>=_FH_6)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      (select(_FH_4, i1)>=1)
      [!
        (i1>=_FH_6)
      ]
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_7)
      [!
        (i1>=_FH_6)
      ]
      (select(_FH_4, i1)>=2)
    ]]
multihoudini, size 0
 checkAllOver
 check chc: inv1  -> inv2
 check chc: inv2  -> inv2
 check chc: inv2  -> inv2
 check chc: inv2  -> false
unsat
(define-fun inv1 ((_FH_0 (Array Int Int))(_FH_1 (Array Int Int))(_FH_2 Int)(_FH_3 Int)) Bool
  (and (forall ((i1 Int)) (or (>= 0 i1) (< i1 0) (>= i1 _FH_3) (>= (select _FH_0 i1) 1))) (forall ((i1 Int)) (or (>= 0 i1) (< i1 0) (>= i1 _FH_3) (>= (select _FH_0 i1) 2)))))
(define-fun inv2 ((_FH_4 (Array Int Int))(_FH_5 (Array Int Int))(_FH_6 Int)(_FH_7 Int)) Bool
  (and (forall ((i1 Int)) (or (>= 0 i1) (>= (select _FH_5 i1) 1) (>= i1 _FH_7) (>= i1 _FH_6))) (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_7) (>= (select _FH_4 i1) 1) (not (>= i1 _FH_6)))) (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_7) (not (>= i1 _FH_6)) (>= (select _FH_4 i1) 2)))))
(define-fun fail () Bool
  true)
pre time:  459.854
dumped to: /tmp//array_init_and_copy_const_1730873492136711725.smt2

1: 2,
2: 1,


===============
inferInvNondet for chc:  inv2 -> fail


 hr.body ((_FH_2>=_FH_3)&&(forall (INT) [||    0>=i1    i1>=_FH_3    select(_FH_1, i1)>=1]))

cands [src]:  
cands [dst]:  
 check chc: inv2  -> false
Model: [&&    _FH_1=const-array(INT, 0)    _FH_2=0    _FH_3=0]

 src->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1<_FH_2)
        (select(_FH_1, i1)<1)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1>=_FH_2)
      ]]
  ]

 dst->1 -> true
2 -> true



===============
inferInvNondet for chc:  inv2 -> inv2


 hr.body [&&    _FH_3=_FH_3'    _FH_0=_FH_0'    _FH_2<_FH_3    _FH_2'=(_FH_2+1)    store(_FH_1, _FH_2, select(_FH_0, _FH_2))=_FH_1']

cands [src]:  
  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1<_FH_2)
        (select(_FH_1, i1)<1)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1>=_FH_2)
      ]]
  ]
 check chc: inv2  -> inv2
Model: [&&    _FH_0=const-array(INT, 451)    _FH_1=store(store(const-array(INT, 5), 451, 0), 1, 8366)    _FH_2=451    _FH_3=452    _FH_0'=const-array(INT, 451)    _FH_1'=store(store(store(const-array(INT, 5), 451, 0), 1, 8366), 451, 451)    _FH_2'=452    _FH_3'=452]
>>>>>>>>>>>>>> next cand: (exists (INT) [&&    0<i1    i1<_FH_3    i1<_FH_2    select(_FH_1, i1)<1])
retres: [&&    0<i1    i1<_FH_3    i1<_FH_2]
dcda: (select(_FH_1, i1)<1)
dcdr: ((0<i1)&&(i1<_FH_3))
dc: (select(_FH_1', i1)>=1)
    >>> nbt (_FH_3=_FH_3')
      ----> (_FH_3=_FH_3')
    >>> nbt (_FH_0=_FH_0')
      ----> (_FH_0=_FH_0')
    >>> nbt (_FH_2<_FH_3)
      ----> (_FH_0=_FH_0')
    >>> nbt (_FH_2'=(_FH_2+1))
      ----> (_FH_0=_FH_0')
    >>> nbt (store(_FH_1, _FH_2, select(_FH_0, _FH_2))=_FH_1')
      ----> (select(_FH_0, i1)=select(_FH_1', i1))
eTmp: [&&
  (_FH_3=_FH_3')
  (_FH_0=_FH_0')
  (__repl_1>=1)
  (__repl_0=__repl_1)
]

to elim: __repl_1, _FH_0', _FH_1', _FH_3'
res = (__repl_0>=1)
newcnd: (select(_FH_0, i1)>=1)
abdtype: 0
nonvac: (select(_FH_0, i1)<1)

 src->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1<_FH_2)
        (select(_FH_1, i1)<1)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1>=_FH_2)
      ]]
  ]

 dst->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1<_FH_2)
        (select(_FH_1, i1)<1)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1>=_FH_2)
      ]]
  ]
1 -> (select(_FH_0, _FH_2)<1)
2 -> (select(_FH_0, _FH_2)>=1)



===============
inferInvNondet for chc:  inv2 -> inv2


 hr.body [&&    _FH_3=_FH_3'    _FH_0=_FH_0'    _FH_2<_FH_3    _FH_2'=(_FH_2+1)    store(_FH_1, _FH_2, select(_FH_0, _FH_2)+-1)=_FH_1']

cands [src]:  
  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1<_FH_2)
        (select(_FH_1, i1)<1)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1>=_FH_2)
      ]]
  ]
 check chc: inv2  -> inv2
Model: [&&    _FH_0=const-array(INT, 8367)    _FH_1=store(store(const-array(INT, 7), 0, -449), 1, 2283)    _FH_2=2    _FH_3=3    _FH_0'=const-array(INT, 8367)    _FH_1'=store(store(store(const-array(INT, 7), 0, -449), 1, 2283), 2, 8366)    _FH_2'=3    _FH_3'=3]
>>>>>>>>>>>>>> next cand: (exists (INT) [&&    0<i1    i1<_FH_3    i1<_FH_2    select(_FH_1, i1)<1])
retres: [&&    0<i1    i1<_FH_3    i1<_FH_2]
dcda: (select(_FH_1, i1)<1)
dcdr: ((0<i1)&&(i1<_FH_3))
dc: (select(_FH_1', i1)>=1)
    >>> nbt (_FH_3=_FH_3')
      ----> (_FH_3=_FH_3')
    >>> nbt (_FH_0=_FH_0')
      ----> (_FH_0=_FH_0')
    >>> nbt (_FH_2<_FH_3)
      ----> (_FH_0=_FH_0')
    >>> nbt (_FH_2'=(_FH_2+1))
      ----> (_FH_0=_FH_0')
    >>> nbt (store(_FH_1, _FH_2, select(_FH_0, _FH_2)+-1)=_FH_1')
      ----> ((select(_FH_0, i1)+-1)=select(_FH_1', i1))
    >>> nbt (select(_FH_0, _FH_2)>=1)
      ----> (select(_FH_0, _FH_2)>=1)
eTmp: [&&
  (_FH_3=_FH_3')
  (_FH_0=_FH_0')
  (__repl_2>=1)
  ((__repl_0+-1)=__repl_2)
  (__repl_1>=1)
]

to elim: _FH_2, __repl_1, __repl_2, _FH_0', _FH_1', _FH_3'
res = (__repl_0>=2)
newcnd: (select(_FH_0, i1)>=2)
abdtype: 0
nonvac: (select(_FH_0, i1)<2)
RF: (i1>=_FH_2)
AF0: (((0<i1)&&(i1<_FH_3))&&(select(_FH_0, i1)<2))
>>>>>>>>>>>>>> next cand: (exists (INT) [&&    0<i1    i1<_FH_3    i1>=_FH_2])

 src->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1<_FH_2)
        (select(_FH_1, i1)<1)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (select(_FH_0, i1)<2)
        (i1>=_FH_2)
      ]]
  ]

 dst->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (i1<_FH_2)
        (select(_FH_1, i1)<1)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_3)
        (select(_FH_0, i1)<2)
        (i1>=_FH_2)
      ]]
  ]
1 -> (select(_FH_0, _FH_2)<1)
2 -> (select(_FH_0, _FH_2)>=1)



===============
inferInvNondet for chc:   -> inv2


 hr.body [&&    0=_FH_2'    _FH_3'>0    (exists (INT) [&&    0<i1    i1>=0    i1<_FH_3'    select(_FH_0', i1)<1])||(exists (INT) [&&    0<i1    i1>=0    i1<_FH_3'    select(_FH_0', i1)<2])]

 check chc:  -> inv2
multihoudini, size 0
 checkAllOver
 check chc:  -> inv2
 check chc: inv2  -> inv2
 check chc: inv2  -> inv2
 check chc: inv2  -> false
unsat
(define-fun inv2 ((_FH_0 (Array Int Int))(_FH_1 (Array Int Int))(_FH_2 Int)(_FH_3 Int)) Bool
  (or (exists ((i1 Int)) (and (< 0 i1) (< i1 _FH_3) (< i1 _FH_2) (< (select _FH_1 i1) 1))) (exists ((i1 Int)) (and (< 0 i1) (< i1 _FH_3) (< (select _FH_0 i1) 2) (>= i1 _FH_2)))))
(define-fun fail () Bool
  true)
maximal!
unsat
(define-fun inv1 ((_FH_0 (Array Int Int))(_FH_1 (Array Int Int))(_FH_2 Int)(_FH_3 Int)) Bool
  (and (forall ((i1 Int)) (or (>= 0 i1) (< i1 0) (>= i1 _FH_3) (>= (select _FH_0 i1) 1))) (forall ((i1 Int)) (or (>= 0 i1) (< i1 0) (>= i1 _FH_3) (>= (select _FH_0 i1) 2)))))
(define-fun inv2 ((_FH_4 (Array Int Int))(_FH_5 (Array Int Int))(_FH_6 Int)(_FH_7 Int)) Bool
  (and (forall ((i1 Int)) (or (>= 0 i1) (>= (select _FH_5 i1) 1) (>= i1 _FH_7) (>= i1 _FH_6))) (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_7) (>= (select _FH_4 i1) 1) (not (>= i1 _FH_6)))) (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_7) (not (>= i1 _FH_6)) (>= (select _FH_4 i1) 2)))))
(define-fun fail () Bool
  true)
m/n time:  239.623
