


===============
inferInvNondet for chc:  inv2 -> fail


 hr.body (exists (INT) [&&    0<i1    _FH_8>=_FH_9    i1<_FH_9    select(_FH_7, i1)!=0])

cands [src]:  
cands [dst]:  
 check chc: inv2  -> false
Model: [&&    _FH_7=const-array(INT, 4)    _FH_8=2    _FH_9=2]

 src->  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]

 dst->


===============
inferInvNondet for chc:  inv2 -> inv2


 hr.body [&&    _FH_9=_FH_9'    _FH_8<_FH_9    _FH_8'=(_FH_8+1)    _FH_5=_FH_5'    store(_FH_7, _FH_8, select(_FH_5, _FH_8)+select(_FH_6, _FH_8))=_FH_7'    _FH_6=_FH_6']

cands [src]:  
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]
 check chc: inv2  -> inv2
Model: [&&    _FH_5=const-array(INT, 6)    _FH_6=const-array(INT, 0)    _FH_7=const-array(INT, 5)    _FH_8=1    _FH_9=2    _FH_5'=const-array(INT, 6)    _FH_6'=const-array(INT, 0)    _FH_7'=store(const-array(INT, 5), 1, 6)    _FH_8'=2    _FH_9'=2]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_9    select(_FH_7, i1)=0    i1>=_FH_8])
retres: [||    0>=i1    i1>=_FH_9    i1>=_FH_8]
dcda: (select(_FH_7, i1)=0)
dcdr: ((0>=i1)||(i1>=_FH_9))
dc: (select(_FH_7', i1)!=0)
    >>> nbt (_FH_9=_FH_9')
      ----> (_FH_9=_FH_9')
    >>> nbt (_FH_8<_FH_9)
      ----> (_FH_9=_FH_9')
    >>> nbt (_FH_8'=(_FH_8+1))
      ----> (_FH_9=_FH_9')
    >>> nbt (_FH_5=_FH_5')
      ----> (_FH_5=_FH_5')
    >>> nbt (store(_FH_7, _FH_8, select(_FH_5, _FH_8)+select(_FH_6, _FH_8))=_FH_7')
      ----> ((select(_FH_5, i1)+select(_FH_6, i1))=select(_FH_7', i1))
    >>> nbt (_FH_6=_FH_6')
      ----> (_FH_6=_FH_6')
eTmp: [&&
  (_FH_9=_FH_9')
  (_FH_5=_FH_5')
  (_FH_6=_FH_6')
  (__repl_0!=0)
  ((__repl_1+__repl_2)=__repl_0)
]

to elim: _FH_5', _FH_6', _FH_7', _FH_9', __repl_0
res = ((__repl_1+__repl_2)!=0)
newcnd: ((select(_FH_5, i1)+select(_FH_6, i1))!=0)
abdtype: 0
nonvac: ((select(_FH_5, i1)+select(_FH_6, i1))=0)
RF: (i1>=_FH_8)
AF0: (((0>=i1)||(i1>=_FH_9))||((select(_FH_5, i1)+select(_FH_6, i1))=0))

 src->  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      ((select(_FH_5, i1)+select(_FH_6, i1))=0)
      [!
        (i1>=_FH_8)
      ]
    ]]

 dst->  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      ((select(_FH_5, i1)+select(_FH_6, i1))=0)
      [!
        (i1>=_FH_8)
      ]
    ]]



===============
inferInvNondet for chc:  inv2 -> inv2


 hr.body [&&    _FH_9=_FH_9'    _FH_8<_FH_9    _FH_8'=(_FH_8+1)    _FH_5=_FH_5'    _FH_6=_FH_6'    store(_FH_7, _FH_8, select(_FH_5, _FH_8)+(-select(_FH_6, _FH_8)))=_FH_7']

cands [src]:  
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      ((select(_FH_5, i1)+select(_FH_6, i1))=0)
      [!
        (i1>=_FH_8)
      ]
    ]]
 check chc: inv2  -> inv2
Model: [&&    _FH_5=store(store(store(const-array(INT, 4), 1, -1237), 0, 1797), -449, 609)    _FH_6=store(store(store(const-array(INT, 5), -8365, 2282), 1, 1237), 0, 1796)    _FH_7=store(store(const-array(INT, 7), -8365, 11), -449, 13)    _FH_8=1    _FH_9=2    _FH_5'=store(store(store(const-array(INT, 4), 1, -1237), 0, 1797), -449, 609)    _FH_6'=store(store(store(const-array(INT, 5), -8365, 2282), 1, 1237), 0, 1796)    _FH_7'=store(store(store(const-array(INT, 7), -8365, 11), -449, 13), 1, -2474)    _FH_8'=2    _FH_9'=2]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_9    select(_FH_7, i1)=0    i1>=_FH_8])
retres: [||    0>=i1    i1>=_FH_9    i1>=_FH_8]
dcda: (select(_FH_7, i1)=0)
dcdr: ((0>=i1)||(i1>=_FH_9))
dc: (select(_FH_7', i1)!=0)
    >>> nbt (_FH_9=_FH_9')
      ----> (_FH_9=_FH_9')
    >>> nbt (_FH_8<_FH_9)
      ----> (_FH_9=_FH_9')
    >>> nbt (_FH_8'=(_FH_8+1))
      ----> (_FH_9=_FH_9')
    >>> nbt (_FH_5=_FH_5')
      ----> (_FH_5=_FH_5')
    >>> nbt (_FH_6=_FH_6')
      ----> (_FH_6=_FH_6')
    >>> nbt (store(_FH_7, _FH_8, select(_FH_5, _FH_8)+(-select(_FH_6, _FH_8)))=_FH_7')
      ----> ((select(_FH_5, i1)+(-select(_FH_6, i1)))=select(_FH_7', i1))
eTmp: [&&
  (_FH_9=_FH_9')
  (_FH_5=_FH_5')
  (_FH_6=_FH_6')
  (__repl_0!=0)
  ((__repl_1+(-__repl_2))=__repl_0)
]

to elim: _FH_5', _FH_6', _FH_7', _FH_9', __repl_0
res = ((__repl_1+(-__repl_2))!=0)
newcnd: ((select(_FH_5, i1)+(-select(_FH_6, i1)))!=0)
abdtype: 0
nonvac: ((select(_FH_5, i1)+(-select(_FH_6, i1)))=0)
RF: (i1>=_FH_8)
AF0: (((0>=i1)||(i1>=_FH_9))||((select(_FH_5, i1)+(-select(_FH_6, i1)))=0))
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_9    (select(_FH_5, i1)+select(_FH_6, i1))=0    i1<_FH_8])
retres: [||    0>=i1    i1>=_FH_9    i1<_FH_8]

 src->  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      ((select(_FH_5, i1)+select(_FH_6, i1))=0)
      [!
        (i1>=_FH_8)
      ]
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      [!
        (i1>=_FH_8)
      ]
      ((select(_FH_5, i1)+(-select(_FH_6, i1)))=0)
    ]]

 dst->  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      ((select(_FH_5, i1)+select(_FH_6, i1))=0)
      [!
        (i1>=_FH_8)
      ]
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      [!
        (i1>=_FH_8)
      ]
      ((select(_FH_5, i1)+(-select(_FH_6, i1)))=0)
    ]]



===============
inferInvNondet for chc:  inv1 -> inv2


 hr.body [&&    0=_FH_8'    _FH_0=_FH_5'    _FH_4=_FH_9'    _FH_4>0    _FH_1=_FH_6'    _FH_2=_FH_7']

cands [src]:  
cands [dst]:  
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      ((select(_FH_5, i1)+select(_FH_6, i1))=0)
      [!
        (i1>=_FH_8)
      ]
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      [!
        (i1>=_FH_8)
      ]
      ((select(_FH_5, i1)+(-select(_FH_6, i1)))=0)
    ]]
 check chc: inv1  -> inv2
Model: [&&    _FH_0=const-array(INT, 0)    _FH_1=const-array(INT, -1)    _FH_2=const-array(INT, 0)    _FH_4=2    _FH_5'=const-array(INT, 0)    _FH_6'=const-array(INT, -1)    _FH_7'=const-array(INT, 0)    _FH_8'=0    _FH_9'=2]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_9    select(_FH_7, i1)=0    i1>=_FH_8])
retres: [||    0>=i1    i1>=_FH_9    i1>=_FH_8]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_9    (select(_FH_5, i1)+select(_FH_6, i1))=0    i1<_FH_8])
retres: [||    0>=i1    i1>=_FH_9    i1<_FH_8]
dcda: ((select(_FH_5, i1)+select(_FH_6, i1))=0)
dcdr: [||    0>=i1    i1>=_FH_9    i1<_FH_8]
dc: [&&    0<i1    i1<_FH_9'    i1>=_FH_8'    (select(_FH_5', i1)+select(_FH_6', i1))!=0]
    >>> nbt (0=_FH_8')
      ----> (0=_FH_8')
    >>> nbt (_FH_0=_FH_5')
      ----> (_FH_0=_FH_5')
    >>> nbt (_FH_4=_FH_9')
      ----> (_FH_4=_FH_9')
    >>> nbt (_FH_4>0)
      ----> (_FH_4>0)
    >>> nbt (_FH_1=_FH_6')
      ----> (_FH_1=_FH_6')
    >>> nbt (_FH_2=_FH_7')
      ----> (_FH_2=_FH_7')
eTmp: [&&
  (0=_FH_8')
  (_FH_0=_FH_5')
  (_FH_4=_FH_9')
  (_FH_4>0)
  (_FH_1=_FH_6')
  (_FH_2=_FH_7')
  (0<i1)
  (i1<_FH_9')
  (i1>=_FH_8')
  ((__repl_0+__repl_1)!=0)
]

to elim: _FH_5', _FH_6', _FH_7', _FH_8', _FH_9', __repl_0, __repl_1
res = [&&    _FH_4>0    i1>=0    i1>0    _FH_4>i1]
newcnd: [&&    _FH_4>0    i1>=0    i1>0    _FH_4>i1]
abdtype: 0
nonvac: [||    i1<0    i1<=0    _FH_4<=i1]
dc: [&&    0<i1    i1<_FH_9'    i1>=_FH_8'    (select(_FH_5', i1)+select(_FH_6', i1))!=0]
    >>> nbt (0=_FH_8')
      ----> (0=_FH_8')
    >>> nbt (_FH_0=_FH_5')
      ----> (select(_FH_0, i1)=select(_FH_5', i1))
    >>> nbt (_FH_4=_FH_9')
      ----> (_FH_4=_FH_9')
    >>> nbt (_FH_4>0)
      ----> (_FH_4>0)
    >>> nbt (_FH_1=_FH_6')
      ----> (select(_FH_1, i1)=select(_FH_6', i1))
    >>> nbt (_FH_2=_FH_7')
      ----> (select(_FH_2, i1)=select(_FH_7', i1))
eTmp: [&&
  (0=_FH_8')
  (_FH_4=_FH_9')
  (_FH_4>0)
  (0<i1)
  (i1<_FH_9')
  (i1>=_FH_8')
  ((__repl_1+__repl_2)!=0)
  (__repl_3=__repl_1)
  (__repl_4=__repl_2)
  (__repl_5=__repl_0)
]

to elim: _FH_5', _FH_6', _FH_7', _FH_8', _FH_9', __repl_0, __repl_1, __repl_2
res = [&&    _FH_4>0    0<i1    i1>=0    i1<_FH_4    (__repl_3+__repl_4)!=0]
newcnd: [&&    _FH_4>0    0<i1    i1>=0    i1<_FH_4    (select(_FH_0, i1)+select(_FH_1, i1))!=0]
abdtype: 1
nonvac: [||    0>=i1    i1<0    i1>=_FH_4    (select(_FH_0, i1)+select(_FH_1, i1))=0]
>>>>>>>>>>>>>> next cand: (forall (INT) [||    0>=i1    i1>=_FH_9    i1<_FH_8    (select(_FH_5, i1)+(-select(_FH_6, i1)))=0])
retres: [||    0>=i1    i1>=_FH_9    i1<_FH_8]
dcda: ((select(_FH_5, i1)+(-select(_FH_6, i1)))=0)
dcdr: [||    0>=i1    i1>=_FH_9    i1<_FH_8]
dc: [&&    0<i1    i1<_FH_9'    i1>=_FH_8'    (select(_FH_5', i1)+(-select(_FH_6', i1)))!=0]
    >>> nbt (0=_FH_8')
      ----> (0=_FH_8')
    >>> nbt (_FH_0=_FH_5')
      ----> (_FH_0=_FH_5')
    >>> nbt (_FH_4=_FH_9')
      ----> (_FH_4=_FH_9')
    >>> nbt (_FH_4>0)
      ----> (_FH_4>0)
    >>> nbt (_FH_1=_FH_6')
      ----> (_FH_1=_FH_6')
    >>> nbt (_FH_2=_FH_7')
      ----> (_FH_2=_FH_7')
eTmp: [&&
  (0=_FH_8')
  (_FH_0=_FH_5')
  (_FH_4=_FH_9')
  (_FH_4>0)
  (_FH_1=_FH_6')
  (_FH_2=_FH_7')
  (0<i1)
  (i1<_FH_9')
  (i1>=_FH_8')
  ((__repl_0+(-__repl_1))!=0)
]

to elim: _FH_5', _FH_6', _FH_7', _FH_8', _FH_9', __repl_0, __repl_1
res = [&&    _FH_4>0    i1>=0    i1>0    _FH_4>i1]
newcnd: [&&    _FH_4>0    i1>=0    i1>0    _FH_4>i1]
abdtype: 0
nonvac: [||    i1<0    i1<=0    _FH_4<=i1]
dc: [&&    0<i1    i1<_FH_9'    i1>=_FH_8'    (select(_FH_5', i1)+(-select(_FH_6', i1)))!=0]
    >>> nbt (0=_FH_8')
      ----> (0=_FH_8')
    >>> nbt (_FH_0=_FH_5')
      ----> (select(_FH_0, i1)=select(_FH_5', i1))
    >>> nbt (_FH_4=_FH_9')
      ----> (_FH_4=_FH_9')
    >>> nbt (_FH_4>0)
      ----> (_FH_4>0)
    >>> nbt (_FH_1=_FH_6')
      ----> (select(_FH_1, i1)=select(_FH_6', i1))
    >>> nbt (_FH_2=_FH_7')
      ----> (select(_FH_2, i1)=select(_FH_7', i1))
eTmp: [&&
  (0=_FH_8')
  (_FH_4=_FH_9')
  (_FH_4>0)
  (0<i1)
  (i1<_FH_9')
  (i1>=_FH_8')
  ((__repl_1+(-__repl_2))!=0)
  (__repl_3=__repl_1)
  (__repl_4=__repl_2)
  (__repl_5=__repl_0)
]

to elim: _FH_5', _FH_6', _FH_7', _FH_8', _FH_9', __repl_0, __repl_1, __repl_2
res = [&&    _FH_4>0    0<i1    i1>=0    i1<_FH_4    (__repl_3+(-__repl_4))!=0]
newcnd: [&&    _FH_4>0    0<i1    i1>=0    i1<_FH_4    (select(_FH_0, i1)+(-select(_FH_1, i1)))!=0]
abdtype: 1
nonvac: [||    0>=i1    i1<0    i1>=_FH_4    (select(_FH_0, i1)+(-select(_FH_1, i1)))=0]

 src->  [forall (i1)
    [||
      (0>=i1)
      (i1<0)
      (i1>=_FH_4)
      ((select(_FH_0, i1)+select(_FH_1, i1))=0)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1<0)
      (i1>=_FH_4)
      ((select(_FH_0, i1)+(-select(_FH_1, i1)))=0)
    ]]

 dst->  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      (select(_FH_7, i1)=0)
      (i1>=_FH_8)
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      ((select(_FH_5, i1)+select(_FH_6, i1))=0)
      [!
        (i1>=_FH_8)
      ]
    ]]
  [forall (i1)
    [||
      (0>=i1)
      (i1>=_FH_9)
      [!
        (i1>=_FH_8)
      ]
      ((select(_FH_5, i1)+(-select(_FH_6, i1)))=0)
    ]]
multihoudini, size 0
 checkAllOver
 check chc: inv1  -> inv2
 check chc: inv2  -> inv2
 check chc: inv2  -> inv2
 check chc: inv2  -> false
unsat
(define-fun inv1 ((_FH_0 (Array Int Int))(_FH_1 (Array Int Int))(_FH_2 (Array Int Int))(_FH_3 Int)(_FH_4 Int)) Bool
  (and (forall ((i1 Int)) (or (>= 0 i1) (< i1 0) (>= i1 _FH_4) (= (+ (select _FH_0 i1) (select _FH_1 i1)) 0))) (forall ((i1 Int)) (or (>= 0 i1) (< i1 0) (>= i1 _FH_4) (= (+ (select _FH_0 i1) (- (select _FH_1 i1))) 0)))))
(define-fun inv2 ((_FH_5 (Array Int Int))(_FH_6 (Array Int Int))(_FH_7 (Array Int Int))(_FH_8 Int)(_FH_9 Int)) Bool
  (and (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_9) (= (select _FH_7 i1) 0) (>= i1 _FH_8))) (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_9) (= (+ (select _FH_5 i1) (select _FH_6 i1)) 0) (not (>= i1 _FH_8)))) (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_9) (not (>= i1 _FH_8)) (= (+ (select _FH_5 i1) (- (select _FH_6 i1))) 0)))))
(define-fun fail () Bool
  true)
pre time:  473.892
dumped to: /tmp//array_init_pair_symmetr_1730873496041741340.smt2

1: 2,
2: 1,


===============
inferInvNondet for chc:  inv2 -> fail


 hr.body ((forall (INT) [||    0>=i1    i1>=_FH_4    select(_FH_2, i1)=0])&&(_FH_3>=_FH_4))

cands [src]:  
cands [dst]:  
 check chc: inv2  -> false
Model: [&&    _FH_2=const-array(INT, 0)    _FH_3=0    _FH_4=0]

 src->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1<_FH_3)
        (select(_FH_2, i1)!=0)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1>=_FH_3)
      ]]
  ]

 dst->1 -> true
2 -> true



===============
inferInvNondet for chc:  inv2 -> inv2


 hr.body [&&    _FH_0=_FH_0'    _FH_1=_FH_1'    _FH_3'=(_FH_3+1)    _FH_3<_FH_4    _FH_4=_FH_4'    store(_FH_2, _FH_3, select(_FH_0, _FH_3)+select(_FH_1, _FH_3))=_FH_2']

cands [src]:  
  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1<_FH_3)
        (select(_FH_2, i1)!=0)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1>=_FH_3)
      ]]
  ]
 check chc: inv2  -> inv2
Model: [&&    _FH_0=const-array(INT, 0)    _FH_1=const-array(INT, 0)    _FH_2=store(store(const-array(INT, 6), -8855, 9), 1, 0)    _FH_3=2    _FH_4=3    _FH_0'=const-array(INT, 0)    _FH_1'=const-array(INT, 0)    _FH_2'=store(store(store(const-array(INT, 6), -8855, 9), 1, 0), 2, 0)    _FH_3'=3    _FH_4'=3]
>>>>>>>>>>>>>> next cand: (exists (INT) [&&    0<i1    i1<_FH_4    i1<_FH_3    select(_FH_2, i1)!=0])
retres: [&&    0<i1    i1<_FH_4    i1<_FH_3]
dcda: (select(_FH_2, i1)!=0)
dcdr: ((0<i1)&&(i1<_FH_4))
dc: (select(_FH_2', i1)=0)
    >>> nbt (_FH_0=_FH_0')
      ----> (_FH_0=_FH_0')
    >>> nbt (_FH_1=_FH_1')
      ----> (_FH_1=_FH_1')
    >>> nbt (_FH_3'=(_FH_3+1))
      ----> (_FH_1=_FH_1')
    >>> nbt (_FH_3<_FH_4)
      ----> (_FH_1=_FH_1')
    >>> nbt (_FH_4=_FH_4')
      ----> (_FH_4=_FH_4')
    >>> nbt (store(_FH_2, _FH_3, select(_FH_0, _FH_3)+select(_FH_1, _FH_3))=_FH_2')
      ----> ((select(_FH_0, i1)+select(_FH_1, i1))=select(_FH_2', i1))
eTmp: [&&
  (_FH_0=_FH_0')
  (_FH_1=_FH_1')
  (_FH_4=_FH_4')
  (__repl_2=0)
  ((__repl_0+__repl_1)=__repl_2)
]

to elim: __repl_2, _FH_0', _FH_1', _FH_2', _FH_4'
res = ((__repl_0+__repl_1)=0)
newcnd: ((select(_FH_0, i1)+select(_FH_1, i1))=0)
abdtype: 0
nonvac: ((select(_FH_0, i1)+select(_FH_1, i1))!=0)

 src->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1<_FH_3)
        (select(_FH_2, i1)!=0)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1>=_FH_3)
      ]]
  ]

 dst->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1<_FH_3)
        (select(_FH_2, i1)!=0)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1>=_FH_3)
      ]]
  ]
1 -> ((select(_FH_0, _FH_3)+select(_FH_1, _FH_3))!=0)
2 -> ((select(_FH_0, _FH_3)+select(_FH_1, _FH_3))=0)



===============
inferInvNondet for chc:  inv2 -> inv2


 hr.body [&&    _FH_0=_FH_0'    _FH_1=_FH_1'    _FH_3'=(_FH_3+1)    _FH_3<_FH_4    _FH_4=_FH_4'    store(_FH_2, _FH_3, select(_FH_0, _FH_3)+(-select(_FH_1, _FH_3)))=_FH_2']

cands [src]:  
  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1<_FH_3)
        (select(_FH_2, i1)!=0)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1>=_FH_3)
      ]]
  ]
 check chc: inv2  -> inv2
Model: [&&    _FH_0=const-array(INT, 0)    _FH_1=const-array(INT, 0)    _FH_2=store(store(const-array(INT, 7), 2, 0), 1, 0)    _FH_3=3    _FH_4=4    _FH_0'=const-array(INT, 0)    _FH_1'=const-array(INT, 0)    _FH_2'=store(store(store(const-array(INT, 7), 2, 0), 1, 0), 3, 0)    _FH_3'=4    _FH_4'=4]
>>>>>>>>>>>>>> next cand: (exists (INT) [&&    0<i1    i1<_FH_4    i1<_FH_3    select(_FH_2, i1)!=0])
retres: [&&    0<i1    i1<_FH_4    i1<_FH_3]
dcda: (select(_FH_2, i1)!=0)
dcdr: ((0<i1)&&(i1<_FH_4))
dc: (select(_FH_2', i1)=0)
    >>> nbt (_FH_0=_FH_0')
      ----> (_FH_0=_FH_0')
    >>> nbt (_FH_1=_FH_1')
      ----> (_FH_1=_FH_1')
    >>> nbt (_FH_3'=(_FH_3+1))
      ----> (_FH_1=_FH_1')
    >>> nbt (_FH_3<_FH_4)
      ----> (_FH_1=_FH_1')
    >>> nbt (_FH_4=_FH_4')
      ----> (_FH_4=_FH_4')
    >>> nbt (store(_FH_2, _FH_3, select(_FH_0, _FH_3)+(-select(_FH_1, _FH_3)))=_FH_2')
      ----> ((select(_FH_0, i1)+(-select(_FH_1, i1)))=select(_FH_2', i1))
    >>> nbt ((select(_FH_0, _FH_3)+select(_FH_1, _FH_3))=0)
      ----> ((select(_FH_0, _FH_3)+select(_FH_1, _FH_3))=0)
eTmp: [&&
  (_FH_0=_FH_0')
  (_FH_1=_FH_1')
  (_FH_4=_FH_4')
  (__repl_4=0)
  ((__repl_0+(-__repl_1))=__repl_4)
  ((__repl_2+__repl_3)=0)
]

to elim: _FH_3, __repl_2, __repl_3, __repl_4, _FH_0', _FH_1', _FH_2', _FH_4'
res = ((__repl_0+(-__repl_1))=0)
newcnd: ((select(_FH_0, i1)+(-select(_FH_1, i1)))=0)
abdtype: 0
nonvac: ((select(_FH_0, i1)+(-select(_FH_1, i1)))!=0)
RF: (i1>=_FH_3)
AF0: (((0<i1)&&(i1<_FH_4))&&((select(_FH_0, i1)+(-select(_FH_1, i1)))!=0))
>>>>>>>>>>>>>> next cand: (exists (INT) [&&    0<i1    i1<_FH_4    i1>=_FH_3])

 src->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1<_FH_3)
        (select(_FH_2, i1)!=0)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        ((select(_FH_0, i1)+(-select(_FH_1, i1)))!=0)
        (i1>=_FH_3)
      ]]
  ]

 dst->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1<_FH_3)
        (select(_FH_2, i1)!=0)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        ((select(_FH_0, i1)+(-select(_FH_1, i1)))!=0)
        (i1>=_FH_3)
      ]]
  ]
1 -> ((select(_FH_0, _FH_3)+select(_FH_1, _FH_3))!=0)
2 -> ((select(_FH_0, _FH_3)+select(_FH_1, _FH_3))=0)



===============
inferInvNondet for chc:   -> inv2


 hr.body [&&    0=_FH_3'    _FH_4'>0    (exists (INT) [&&    0<i1    i1>=0    i1<_FH_4'    (select(_FH_0', i1)+select(_FH_1', i1))!=0])||(exists (INT) [&&    0<i1    i1>=0    i1<_FH_4'    (select(_FH_0', i1)+(-select(_FH_1', i1)))!=0])]

 check chc:  -> inv2
Model: ((_FH_3'=0)&&(_FH_4'=2))
initic: ((0=_FH_3')&&(_FH_4'>0))
initqc: ((exists (INT) [&&    0<i1    i1>=0    i1<_FH_4'    (select(_FH_0', i1)+select(_FH_1', i1))!=0])||(exists (INT) [&&    0<i1    i1>=0    i1<_FH_4'    (select(_FH_0', i1)+(-select(_FH_1', i1)))!=0]))
(exists (INT) [&&    0<i1    i1<_FH_4    i1<_FH_3    select(_FH_2, i1)!=0])
(exists (INT) [&&    ((0<i1)&&(i1<_FH_4))&&((select(_FH_0, i1)+(-select(_FH_1, i1)))!=0)    i1>=_FH_3    i1<_FH_4])
retres: [&&    0<i1    i1<_FH_4    i1>=_FH_3]
retres: ((select(_FH_0', i1)+select(_FH_1', i1))!=0)

 dst->  [||
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        (i1<_FH_3)
        (select(_FH_2, i1)!=0)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        ((select(_FH_0, i1)+(-select(_FH_1, i1)))!=0)
        (i1>=_FH_3)
      ]]
    [exists (i1)
      [&&
        (0<i1)
        (i1<_FH_4)
        ((select(_FH_0, i1)+select(_FH_1, i1))!=0)
        (i1>=_FH_3)
      ]]
  ]
multihoudini, size 0
 checkAllOver
 check chc:  -> inv2
 check chc: inv2  -> inv2
 check chc: inv2  -> inv2
 check chc: inv2  -> false
unsat
(define-fun inv2 ((_FH_0 (Array Int Int))(_FH_1 (Array Int Int))(_FH_2 (Array Int Int))(_FH_3 Int)(_FH_4 Int)) Bool
  (or (exists ((i1 Int)) (and (< 0 i1) (< i1 _FH_4) (< i1 _FH_3) (distinct (select _FH_2 i1) 0))) (exists ((i1 Int)) (and (< 0 i1) (< i1 _FH_4) (distinct (+ (select _FH_0 i1) (- (select _FH_1 i1))) 0) (>= i1 _FH_3))) (exists ((i1 Int)) (and (< 0 i1) (< i1 _FH_4) (distinct (+ (select _FH_0 i1) (select _FH_1 i1)) 0) (>= i1 _FH_3)))))
(define-fun fail () Bool
  true)
maximal!
unsat
(define-fun inv1 ((_FH_0 (Array Int Int))(_FH_1 (Array Int Int))(_FH_2 (Array Int Int))(_FH_3 Int)(_FH_4 Int)) Bool
  (and (forall ((i1 Int)) (or (>= 0 i1) (< i1 0) (>= i1 _FH_4) (= (+ (select _FH_0 i1) (select _FH_1 i1)) 0))) (forall ((i1 Int)) (or (>= 0 i1) (< i1 0) (>= i1 _FH_4) (= (+ (select _FH_0 i1) (- (select _FH_1 i1))) 0)))))
(define-fun inv2 ((_FH_5 (Array Int Int))(_FH_6 (Array Int Int))(_FH_7 (Array Int Int))(_FH_8 Int)(_FH_9 Int)) Bool
  (and (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_9) (= (select _FH_7 i1) 0) (>= i1 _FH_8))) (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_9) (= (+ (select _FH_5 i1) (select _FH_6 i1)) 0) (not (>= i1 _FH_8)))) (forall ((i1 Int)) (or (>= 0 i1) (>= i1 _FH_9) (not (>= i1 _FH_8)) (= (+ (select _FH_5 i1) (- (select _FH_6 i1))) 0)))))
(define-fun fail () Bool
  true)
m/n time:  454.333
